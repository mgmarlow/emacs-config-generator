;;; Emacs configuration -*- lexical-binding: t -*-
;;;
;;; Save this file to ~/.emacs.d/init.el.
;;; Afterwards, boot up Emacs and learn more about the contents
;;; of this file by reviewing the comments and using the built-in
;;; help system:
;;;
;;; - variables: `C-h v` or `M-x describe-variable`
;;; - commands: `C-h x` or `M-x describe-command`
;;; - functions: `C-h f` or `M-x describe-function`

;; Performance tweaking, setting sane defaults for modern machines.
(setq gc-cons-threshold 100000000) ; 100 mb
(setq read-process-output-max (* 1024 1024)) ; 1mb

;; Adds a helpful message that tracks startup performance. Use this to
;; help diagnose performance issues in your Emacs Lisp configuration.
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (message "Emacs loaded in %s."
		     (emacs-init-time))))

;; Remove UI clutter: hide the scrollbar, menubar, and toolbar. You may
;; want to keep these on when you're getting started, though I recommend
;; working through the Emacs tutorial instead.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; height = px * 100
(set-face-attribute 'default nil :font "{{ font_family }}" :height 120)

;; Unique buffer names in the minibuffer where there are many identical files.
;; Super useful if you rely on folders for organization, say, foo/index.ts and
;; bar/index.ts.
(require 'uniquify)

;; A number of misc. modes and variable tweaks follow this comment, adding in
;; functionality that I consider a "better default" Emacs experience. You can
;; learn more about each of these modes and commands by looking up the mode
;; via `C-h x electric-pair-mode`.
(electric-pair-mode t)               ; Automatically insert closing parens
(show-paren-mode 1)                  ; Visualize matching parens
(setq-default indent-tabs-mode nil)  ; Prefer spaces to tabs
(save-place-mode t)                  ; Automatically save your place in files
(savehist-mode t)                    ; Save history in minibuffer to keep recent commands easily accessible
(recentf-mode t)                     ; Keep track of open files
(global-auto-revert-mode t)          ; Keep files up-to-date when they change outside Emacs

;; Display line numbers only when in programming modes
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; You can look up these variables with `C-h v variable-name`.
(setq uniquify-buffer-name-style 'forward
      window-resize-pixelwise t
      frame-resize-pixelwise t
      load-prefer-newer t
      backup-by-copying t
      ;; I'll add an extra note here since user customizations are important.
      ;; Emacs actually offers a UI-based customization menu, `M-x customize`.
      ;; You can use this menu to change variable values across Emacs. By default,
      ;; changing a variable will write to your `init.el` automatically, mixing
      ;; your hand-written Emacs Lisp with automatically-generated Lisp from the
      ;; customize menu. The following setting instead writes customizations to a
      ;; separate file, `custom.el`, to keep your `init.el` clean.
      custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Set up package management with MELPA, an unofficial (but well-curated)
;; package registry. By default Emacs only uses GNU ELPA and NonGNU ELPA.
;; https://elpa.gnu.org/, https://elpa.nongnu.org/.
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(unless package-archive-contents
  (package-refresh-contents))

;; A quick primer on the `use-package' function (refer to `C-h f use-package`
;; for the full details). This package helps organize third-party packages from
;; the `package-archives'. ":ensure t" ensures that the package is installed,
;; fetching it from the package registry it it doesn't exist on your system.
;; The other keyword arguments are for additional configuration. :config is
;; a catch-all for functions you want run after the package is loaded, and
;; basically every other keyword argument that you see could be equivalently
;; used in :config. However, this file also uses :hook, :bind, and :custom
;; to idiomatically define certain properties for the package.
;;
;; (use-package my-package
;;   :ensure t    ; Ensure my-package is installed
;;   :after foo   ; Load my-package only after foo is loaded (seldom used)
;;   :init        ; Run this code before my-package is loaded
;;   :bind        ; Bind these keys to these functions
;;   :custom      ; Set these variables
;;   :config      ; Run this code after my-package is loaded

;; A package with a great selection of themes:
;; https://protesilaos.com/emacs/ef-themes
(use-package ef-themes
  :ensure t
  :config
  (ef-themes-select {{ theme }}))

;; An Emacs completion framework. Minibuffer completion is essential to your
;; Emacs experience, and Vertico is currently one of the best. It's worth
;; diving into the details here and reading "Understanding Minibuffer Completion"
;; by Mickey Peterson (linked below). Getting minibuffer completion right will
;; help accelerate your Emacs learning by orders of magnitude, making it easy
;; to locate and discover commands for your day-to-day editing tasks.
;; https://www.masteringemacs.org/article/understanding-minibuffer-completion
;; https://elpa.gnu.org/packages/vertico.html
(use-package vertico
  :ensure t
  :custom
  (vertico-cycle t)
  (read-buffer-completion-ignore-case t)
  (read-file-name-completion-ignore-case t)
  (completion-styles '(basic substring partial-completion flex))
  :init
  (vertico-mode))

;; Adds annotations to your minibuffer to improve the accessibility of
;; Emac's documentation.
;; https://elpa.gnu.org/packages/marginalia.html
(use-package marginalia
  :after vertico
  :ensure t
  :init
  (marginalia-mode))

;; Adds intellisense-style code completion at point. Works great with
;; LSP via Eglot. Note that you'll likely want to configure this one
;; to match your editing preferences, there's no one-size-fits-all
;; solution.
;; https://elpa.gnu.org/packages/corfu.html
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  ;; You may want to play with delay/prefix/styles to suit your preferences.
  (corfu-auto-delay 0)
  (corfu-auto-prefix 0)
  (completion-styles '(basic)))

;; Adds LSP support. Note that you must have the respective LSP
;; server installed on your machine to use it with Eglot. e.g. I
;; must have rust-analyzer installed to use Eglot with `rust-mode'.
;; https://joaotavora.github.io/eglot/
(use-package eglot
  :ensure t
  :bind (("s-<mouse-1>" . eglot-find-implementation)
         ("C-c ." . eglot-code-action-quickfix))
  ;; Add your programming modes here to automatically start eglot,
  ;; assuming you have the respective LSP server installed.
  ;; :hook ((rust-mode . eglot-ensure))
  :config
  ;; You can configure additional LSP servers by modifying
  ;; `eglot-server-programs'. The following tells eglot to use TypeScript
  ;; language server when working in `web-mode'.
  (add-to-list 'eglot-server-programs
               '(web-mode . ("typescript-language-server" "--stdio"))))

{{~ features -}}

{{ languages }}
